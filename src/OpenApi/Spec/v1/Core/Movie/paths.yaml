moviesCRUD:
  post:
    operationId: core.movie.create
    servers:
      - url: '/api/v1'
    summary: Create a new movie
    tags: ['Movie']
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: 'Die Hard'
              year:
                type: string
                example: '1988'
              description:
                type: string
                example: 'Cool movie'
              genres:
                type: array
                items:
                  type: string
    responses:
      200:
        description: 'Output for a successfully created movie'
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'objects.yaml#/components/Movie'
      400:
        description: 'Bad Request Output'
        content:
          application/json:
            schema:
              oneOf:
                - $ref: 'errors.yaml#/components/MovieAlreadyExists'
                - $ref: '../Genre/errors.yaml#/components/NotFoundGenre'

getMovieById:
  get:
    operationId: core.movie.getById
    servers:
      - url: '/api/v1'
    summary: Find a movie by id
    tags: ['Movie']
    parameters:
      - in: path
        name: movieId
        required: true
        description: 'Id of the movie'
        schema:
          type: string
    responses:
      200:
        description: 'Success output'
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'objects.yaml#/components/Movie'
      404:
        description: 'Movie Not Found'
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'errors.yaml#/components/MovieNotFound'

addGenreToMovie:
  post:
    operationId: core.movie.addGenre
    servers:
      - url: '/api/v1'
    summary: Add a genre to a movie
    tags: ['Movie']
    parameters:
      - in: path
        name: movieId
        required: true
        description: 'Id of the movie'
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              genre:
                type: string
                example: action
    responses:
      204:
        description: 'Successfuly added  a genre to a movie'
      404:
        description: 'Bad Request Output'
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'errors.yaml#/components/MovieNotFound'
      400:
        description: 'Bad Request Output'
        content:
          application/json:
            schema:
              allOf:
                - $ref: 'errors.yaml#/components/MovieAlreadyHasGenre'